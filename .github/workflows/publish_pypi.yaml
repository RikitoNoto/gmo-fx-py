name: Publish Python 🐍 distribution 📦 to PyPI and TestPyPI

on:
  push:
    branches:
      - develop
    paths:
      - setup.py
  workflow_dispatch:
    inputs:
      environment_name:
        type: environment
        required: true

jobs:
  build:
    name: Build distribution 📦
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"
      - name: Install pypa/build
        run: python3 -m pip install build
      - name: Build a binary wheel and a source tarball
        run: python3 -m build
      - name: Store the distribution packages
        uses: actions/upload-artifact@v3
        with:
          name: python-package-distributions
          path: dist/

  publish-to-pypi:
    name: >-
      Publish Python 🐍 distribution 📦 to PyPI
    needs:
      - build
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.environment_name || 'Test' }}
    permissions:
      id-token: write

    steps:
      - name: Download all the dists
        uses: actions/download-artifact@v3
        with:
          name: python-package-distributions
          path: dist/
      - name: Publish distribution 📦 to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
            repository-url: ${{ vars.REPOSITORY_URL }}

  generate-release-note:
    # Productionリリース時のみリリースノート作成
    if: inputs.environment_name == 'Production'
    runs-on: ubuntu-latest
    needs:
      - build
      - publish-to-pypi
    environment:
      name: ${{ inputs.environment_name }}
    permissions:
      contents: write
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      - name: Create Tag
        id: tag
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

          version_str=$(grep -Po 'VERSION\s*=\s*' setup.py)
          version=$(grep -Po "(?<=$version_str\")[0-9]+\.[0-9]+\.[0-9]+" setup.py)
          git tag "v$version"
          git push --tags
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Generate Release Note
        run: |
          gh release create ${{ steps.tag.outputs.version }} --title ${{ steps.tag.outputs.version }} --generate-notes
